substitutions:
  devicename: Garage-Door

esphome:
  name: garagedoor
  comment: Garage Door Controller

esp8266:
  board: esp8285
  framework: 
    version: recommended


# Enable logging
logger:
  level: DEBUG


# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key


#mqtt:
#  broker: !secret mqtt_ip
#  username: !secret mqtt_user
#  password: !secret mqtt_password
##  discovery: false
  
ota:
# It is recommended to have an individual OTA password for each device to prevent accidentally updating the wrong device
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: LIGHT
  fast_connect: true

  ap:
    ssid: "Esp_Garage_Door"
    password: !secret ap_password
    
# Enable fallback hotspot (captive portal) in case wifi connection fails
captive_portal:

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true
      inverted: true
    name: $devicename Button 1
    internal: true
    on_click:
      then:
        - lambda: |-  
            if (id(cover_id).current_operation == CoverOperation::COVER_OPERATION_IDLE) {
              // Cover is idle
              auto call = id(cover_id).make_call();
              call.set_command_open();
              call.perform();
            } else  {
              // Cover is currently openning or closing 
              auto call = id(cover_id).make_call();
              call.set_command_stop();
              call.perform();
            }
  - platform: gpio
    pin:
      number: GPIO9
      mode:
        input: true
        pullup: true
      inverted: true
    name: $devicename Button 2
    internal: true
    on_click:
      then:
        - lambda: |-      
            if (id(cover_id).current_operation == CoverOperation::COVER_OPERATION_IDLE) {
              // Cover is idle
              auto call = id(cover_id).make_call();
              call.set_command_close();
              call.perform();
            } else  {
              // Cover is currently openning or closing 
              auto call = id(cover_id).make_call();
              call.set_command_stop();
              call.perform();
            }
switch:
  - platform: gpio
    name: $devicename Relay 1
    pin: GPIO12
    id: open_switch
#    internal: true
  - platform: gpio
    name: $devicename Relay 2
    pin: GPIO5 
    id: close_switch
#    internal: true
 # - platform: gpio
 #   name: $devicename Relay 3
 #   pin: GPIO4
 # - platform: gpio
 #   name: $devicename Relay 4
 #   pin: GPIO15  

cover:
  - platform: time_based
    name: $devicename Cover
    id: cover_id
    open_action:
      - switch.turn_off: close_switch
      - switch.turn_on: open_switch
      - light.turn_on:
          id: red_light
          brightness: 40%
    open_duration: 30s

    close_action:
      - switch.turn_off: open_switch
      - switch.turn_on: close_switch
      - light.turn_on:
          id: red_light
          brightness: 40%
    close_duration: 30s

    stop_action:
      - switch.turn_off: open_switch
      - switch.turn_off: close_switch  
    on_open:
      - light.turn_off: 
          id: red_light
         
    on_closed:
      - light.turn_on: 
          id: red_light
          brightness: 100%
       
output:
  # Register the red LED as a dimmable output ....
  - platform: esp8266_pwm
    id: red_led
    pin: GPIO13
    inverted: true

light:
  # ... and then make a light out of it.
  - platform: monochromatic
    name: $devicename StatusLED
    output: red_led  
    id: red_light
    
        